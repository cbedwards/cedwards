library(tidyverse)
library(tidyverse)
library(ggthemes)   # extra ggplot themes!
library(bbmle)      # for ICtab()
library(pscl)       # for zeroinfl()
library(MASS)       # for glm.nb()
library(car)        # for Anova()
library(lmtest)     # for lrtest()
library(MARSS)      # for MARSS()
library(conflicted)
library(lmtest)     # for lrtest()
library(MARSS)      # for MARSS()
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("summarize", "dplyr")
song <- read_csv("GPDD_counts.csv") %>% # read in the data file
filter(main_id == 1211) %>% # extracting time series from data file using main_ID
select(count, calendar.year) %>% # filter for these two variables of interest
mutate(count.year = calendar.year - min(calendar.year), # zeroed count.year
count.next = lead(count)) %>% # count.next column for the next year
na.omit() # to eliminate NA observations
song %>% summarize(prop_0s = sum(count.next == 0)/n()) # proportion of count.next 0s
View(song)
x11()
ggplot(song, aes(x = count)) +
geom_histogram(binwidth = 0.5) +
theme_bw() +
labs(x = "Number of Song Sparrows")
x11()
ggplot(song, aes(x = count)) +
geom_histogram(binwidth = 0.5) +
theme_bw() +
labs(x = "Number of Song Sparrows")
ggplot(song, aes(x = count)) +
geom_histogram(binwidth = 0.5) +
theme_bw() +
labs(x = "Number of Song Sparrows")
x11()
# line graph of song sparrow count through years of observation
ggplot(song, aes(x = calendar.year, # define data source and x value
y = count)) + # define y value
geom_line(color = "steelblue", # line color
size = 1.5) + # line thickness
theme_bw() + # aesthetic choice
labs(x = "Year", # x axis label
y = "Number of Song Sparrows") + # y axis label
ggtitle("Number of Song Sparrows vs. Year") + # title
scale_x_continuous(breaks = seq(min(song$calendar.year), # continuous scale function, from first to last year of observation
max(song$calendar.year),
by = 1)) + # by 1 year
scale_y_continuous(breaks = seq(0, 10, by = 1)) + # continuous scale function, from 0 to 10 by 1
coord_cartesian(xlim = c(min(song$calendar.year), # x axis limits
max(song$calendar.year)),
ylim = c(0, 10)) + # y axis limits
theme(panel.grid.major = element_blank(), # removing the major gridlines
panel.grid.minor = element_blank()) + # removing the minor gridlines
theme(axis.text.x = element_text(angle = 45, # angling the axis labels 45 degrees
vjust = 0.5, # 0.5 justification vertically
hjust = 0.5)) + # 0.5 justification horizontally
theme(plot.title = element_text(hjust = 0.5)) # center the plot title
# probability distribution
ggplot(song, aes(x = count.next)) + # read in the data file
geom_histogram(stat = "density", # to create a density plot
color = "steelblue") + # color of density plot
labs(x = "Number of Song Sparrows", # x axis label
y = "Probability") + # y axis label
ggtitle("Probability Distribution of Number of Song Sparrows") + # title
theme_bw() + # aesthetic choice
scale_x_continuous(breaks = seq(0, 10, by = 1)) + # continuous scale function, from 0 to 10 by 1
scale_y_continuous(expand = c(0, 0), # make bars touch x axis
breaks = seq(0, 1, by = 0.05)) + # continuous scale function, from 0 to 1 by 0.05
coord_cartesian(xlim = c(0, 10), # x axis limits
ylim = c(0, 0.35)) + # y axis limits
theme(panel.grid.major = element_blank(), # removing the major gridlines
panel.grid.minor = element_blank()) + # removing the minor gridlines
theme(plot.title = element_text(hjust = 0.5)) + # center the plot title
stat_function(fun = dnorm, # overlay a normal curve using dnorm() function
args = list(mean = mean(song$count.next), # define mean
sd = sd(song$count.next)), # define standard deviation
lwd = 1, # line width
color = "red") # line color
observe_Pois <- glm(count.next ~ count.year, # count.next influenced by count.year
family = poisson, # Poisson family, implied log link
data = song) # define data source
observe_nbin <- glm.nb(count.next ~ count.year, # count.next influenced by count.year
data = song) # define data source
observe_ZiNB <- zeroinfl(count.next ~ count.year | 1, # uniform zero-inflation predictor
dist = "negbin", # negative binomial distribution
data = song) # define data source
coef(observe_ZiNB)
tibble(model = c("Poisson", "Negative Binomial", "Zero-Inflated Negative Binomial"), # define models
initial_pop_size = c(coef(observe_Pois)[1] %>% exp(), # back transformation of first output
coef(observe_nbin)[1] %>% exp(),
coef(observe_ZiNB)[1] %>% exp()),
rate_of_change = c(coef(observe_Pois)[2] %>% exp(), # back transformation of second output
coef(observe_nbin)[2] %>% exp(),
coef(observe_ZiNB)[2] %>% exp()),
parameter_number = c(coef(observe_Pois) %>% length(), # to define estimated number of parameters
coef(observe_nbin) %>% length() + 1, # to account for theta, parameter to measure Poisson conformity
coef(observe_ZiNB) %>% length() + 1), # to account for theta
log_likelihood = c(logLik(observe_Pois), # log-likelihood test
logLik(observe_nbin),
logLik(observe_ZiNB)))
song %>% summarize(prop_0s = sum(count == 0)/n())
song
coef(observe_ZiNB)[3] %>% plogis() # maximum likelihood proportion of true zeroes
confint(observe_ZiNB)[3,] %>% plogis() # 95% confidence interval
observe_ZiNB <- zeroinfl(count.next ~ count.year | 1, # uniform zero-inflation predictor
dist = "negbin", # negative binomial distribution
data = song) # define data source
observe_ZiNB
summary(observe_ZiNB)
library(cedwards)
getwd()
cd("..")
library(devtools)
document()
setwd("C:/repos/cedwards/R")
setwd("..")
document()
?cd
cd("..")
cd("cedwards/")
dir.create("testproj")
skeleton_maker("testproj")
document(0)
document()
skeleton_maker("testproj")
filepath="testproj"
## folder structure
dir.create(here(paste0(filepath, "/1_raw_data")))
getwd()
## folder structure
dir.create(here(paste0(filepath, "\1_raw_data")))
## folder structure
dir.create(here(paste0(filepath, "/1_raw_data")))
?dir.create
getwd(0)
getwd()
?here
document
document()
skeleton_maker("testproj")
use_vignette("introduction")
library(devtools)
library(usethis)
build_readme()
build_readme()
load_all
load_all()
build_readme()
install()
library(devtools0)
library(devtools)
library(usethis)
install.packages("usethis")
library(devtools)
library(usethis)
library(devtools)
install.packages("devtools")
install.packages(usethis)
install.packages("usethis")
library(devtools)
install()
build_readme()
install()
library(cedwards)
build_readme(0)
build_readme()
build_readme()
build_readme()
install(0)
install()
library(usethis)
